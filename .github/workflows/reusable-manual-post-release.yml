name: Reusable Manual Post Release

on:
  workflow_call:
    inputs:
      channel:
        description: "Target channel to finalize post-release steps (develop or main)"
        type: string
        required: true
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        type: string
        required: true
    secrets:
      GHCR_TOKEN:
        description: "GitHub token with packages:write"
        required: true

  workflow_dispatch:
    inputs:
      channel:
        description: "Target channel to finalize post-release steps (develop or main)"
        type: choice
        options: [develop, main]
        required: true
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        type: string
        required: true

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  PROJECT_DIR: code

jobs:

  safety-gates:
    name: Safety Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Verify requested channel matches the current branch
        run: |
          REF="${{ github.ref_name }}"
          REQ="${{ inputs.channel }}"
          echo "Current ref: $REF | Requested channel: $REQ"
          if [ "$REF" != "$REQ" ]; then
            echo "❌ This manual workflow must be run on the '$REQ' branch. Current: '$REF'"
            exit 1
          fi

      - name: Resolve VERSION (must exist)
        id: ver
        env:
          RELEASE_CHANNEL: ${{ inputs.channel }}
        run: |
          V="$(.wendara-ci-actions/scripts/read-version.sh || true)"
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "VERSION=$V" >> "$GITHUB_ENV"
          if [ -z "$V" ]; then
            echo "❌ VERSION could not be resolved (env/gradle.properties/tag)."
            exit 1
          fi
          echo "Resolved VERSION=$V"

      - name: Require exact tag on main (guards against misuse)
        if: ${{ inputs.channel == 'main' }}
        run: |
          if ! git describe --tags --exact-match >/dev/null 2>&1; then
            echo "❌ HEAD is not at a release tag. Aborting."
            exit 1
          fi

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: safety-gates
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Validate VERSION
        run: |
          if [ -z "${VERSION:-}" ]; then
            echo "❌ VERSION is empty. Aborting docker."
            exit 1
          fi

      - name: Ensure gradlew is executable
        run: chmod +x "${PROJECT_DIR}/gradlew"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push with Jib
        working-directory: code
        run: ./gradlew jib --no-daemon -Pversion="${VERSION}"

  clean-snapshots:
    name: Clean old GHCR snapshots (develop only)
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ inputs.channel == 'develop' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh

      - name: Validate VERSION
        run: |
          if [ -z "${VERSION:-}" ]; then
            echo "❌ VERSION is empty. Aborting cleanup."
            exit 1
          fi

      - name: Clean snapshots in GHCR
        run: .wendara-ci-actions/scripts/clean-ghcr-snapshots.sh
        env:
          GH_OWNER: ${{ github.repository_owner }}
          PACKAGE_NAME: ${{ inputs['package-name'] }}
          SNAPSHOT_VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

  sync-pr:
    name: Sync main → develop (main only)
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ inputs.channel == 'main' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh

      - name: Validate VERSION
        run: |
          if [ -z "${VERSION:-}" ]; then
            echo "❌ VERSION is empty. Aborting sync PR."
            exit 1
          fi

      - name: Create sync PR (main → develop)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GHCR_TOKEN }}
          commit-message: "chore: sync main → develop after release"
          title: "Version '${{ env.VERSION }}' sync main → develop"
          body: "Auto-generated PR to sync latest release."
          base: develop
          branch: sync-release-${{ env.VERSION }}
          delete-branch: true
