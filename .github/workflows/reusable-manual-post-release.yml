# .github/workflows/reusable-manual-post-release.yml
#
# Reusable workflow for manual post-release steps in Wendara backend repositories.
# This workflow is intended to be triggered manually or via workflow_call after a release,
# to finalize Docker image publication, clean up old snapshots, and synchronize branches.
#
# Inputs (set by the caller workflow):
#   - channel: string (required)                -> Target channel to finalize post-release steps (develop or main)
#   - package-name: string (required)           -> GHCR package/image name (e.g. wendara-backend)
#
# Secrets (provided by the caller):
#   - GHCR_TOKEN -> GitHub token with packages:write
#
# Outputs:
#   - (none currently, but can be extended)
#
# Notes:
# - This workflow assumes the repo uses a standard Gradle Java project structure.
# - All helper scripts are available under .wendara-ci-actions/scripts/ in this repository.
# - The workflow can be triggered manually (workflow_dispatch) or via workflow_call.
#
# Usage Example:
#   To call this workflow from another repo, use workflow_call and provide the required inputs/secrets.
#   All scripts are invoked using their relative path from the repo root, e.g.:
#     .wendara-ci-actions/scripts/read-version.sh
#     .wendara-ci-actions/scripts/clean-ghcr-snapshots.sh
#
# Jobs Overview:
#   - safety-gates: Validates channel/branch, resolves version, ensures release tag on main.
#   - docker: Builds and pushes Docker image to GHCR using Jib.
#   - clean-snapshots: Cleans old GHCR snapshots (develop only).
#   - sync-pr: After release on main, opens a PR to sync main → develop.
#   - summary: Prints a summary of the post-release actions.
#
# For more details, see the README.md in this repository.

name: Reusable Manual Post Release

on:
  workflow_call:
    inputs:
      channel:
        description: "Target channel to finalize post-release steps (develop or main)"
        type: string
        required: true
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        type: string
        required: true
    secrets:
      GHCR_TOKEN:
        description: "GitHub token with packages:write"
        required: true

  workflow_dispatch:
    inputs:
      channel:
        description: "Target channel to finalize post-release steps (develop or main)"
        type: choice
        options: [ develop, main ]
        required: true
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        type: string
        required: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

env:
  PROJECT_DIR: code
  # GitHub Packages (Maven) via PAT stored as secrets in the caller repo
  GPR_USER: ${{ secrets.GPR_USER }}
  GPR_TOKEN: ${{ secrets.GPR_TOKEN }}
  # Standard GitHub-provided context (used by GHCR, releases, etc.)
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  safety-gates:
    name: Safety Gates
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}  # Expose VERSION to downstream jobs
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Verify requested channel matches current branch
        run: |
          REF="${{ github.ref_name }}"
          REQ="${{ inputs.channel }}"
          echo "Current ref: $REF | Requested channel: $REQ"
          if [ "$REF" != "$REQ" ]; then
            echo "❌ This manual workflow must be run on the '$REQ' branch. Current: '$REF'"
            exit 1
          fi

      - name: Resolve VERSION (must exist)
        id: ver
        env:
          RELEASE_CHANNEL: ${{ inputs.channel }}
        run: |
          V="$(.wendara-ci-actions/scripts/read-version.sh | tr -d '\r\n' || true)"
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "VERSION=$V" >> "$GITHUB_ENV"
          if [ -z "$V" ]; then
            echo "❌ VERSION could not be resolved (env/gradle.properties/tag)."
            exit 1
          fi
          echo "Resolved VERSION=$V"

      - name: Require exact tag on main (guard against misuse)
        if: ${{ inputs.channel == 'main' }}
        run: |
          if ! git describe --tags --exact-match >/dev/null 2>&1; then
            echo "❌ HEAD is not at a release tag. Aborting."
            exit 1
          fi

  docker:
    name: Build & Push Docker Image (Jib → GHCR)
    runs-on: ubuntu-latest
    needs: safety-gates
    env:
      VERSION: ${{ needs.safety-gates.outputs.version }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Configure Gradle credentials (GitHub Packages via PAT)
        shell: bash
        run: |
          set -euo pipefail
          # 1) Write to ~/.gradle
          mkdir -p ~/.gradle
          {
            echo "gpr.user=${GPR_USER}"
            echo "gpr.key=${GPR_TOKEN}"
          } > ~/.gradle/gradle.properties

          # 2) If GRADLE_USER_HOME is set, write there too
          if [ -n "${GRADLE_USER_HOME:-}" ]; then
            mkdir -p "${GRADLE_USER_HOME}"
            cp ~/.gradle/gradle.properties "${GRADLE_USER_HOME}/gradle.properties"
            echo "Wrote gradle.properties to \$GRADLE_USER_HOME=${GRADLE_USER_HOME}"
          else
            echo "GRADLE_USER_HOME not set; using ~/.gradle"
          fi
        env:
          # 3) Belt-and-suspenders: expose as Gradle project properties via env
          ORG_GRADLE_PROJECT_gpr_user: ${{ secrets.GPR_USER }}
          ORG_GRADLE_PROJECT_gpr_key: ${{ secrets.GPR_TOKEN }}

      - name: Validate VERSION presence
        run: |
          if [ -z "${VERSION:-}" ]; then
            echo "❌ VERSION is empty. Aborting docker."
            exit 1
          fi
          echo "Using VERSION=${VERSION}"

      - name: Ensure gradlew is executable
        run: chmod +x "${PROJECT_DIR}/gradlew"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push with Jib
        working-directory: code
        run: ./gradlew jib --no-daemon --no-configuration-cache -PreleaseVersion="${VERSION}"

  clean-snapshots:
    name: Clean old GHCR snapshots (develop only)
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ inputs.channel == 'develop' }}
    env:
      VERSION: ${{ needs.safety-gates.outputs.version }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod -R +x .wendara-ci-actions/scripts

      - name: Validate VERSION presence
        run: |
          if [ -z "${VERSION:-}" ]; then
            echo "❌ VERSION is empty. Aborting cleanup."
            exit 1
          fi
          echo "Cleaning snapshots for VERSION=${VERSION}"

      - name: Clean snapshots in GHCR
        run: .wendara-ci-actions/scripts/clean-ghcr-snapshots.sh
        env:
          GH_OWNER: ${{ github.repository_owner }}
          PACKAGE_NAME: ${{ inputs['package-name'] }}
          SNAPSHOT_VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

  sync-pr:
    name: Sync main → develop (main only)
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ inputs.channel == 'main' }}
    permissions:
      contents: write        # required to push the sync branch
      pull-requests: write
    env:
      VERSION: ${{ needs.safety-gates.outputs.version }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod -R +x .wendara-ci-actions/scripts

      - name: Validate VERSION presence
        run: |
          if [ -z "${VERSION:-}" ]; then
            echo "❌ VERSION is empty. Aborting sync PR."
            exit 1
          fi
          echo "Preparing sync PR for VERSION=${VERSION}"

      - name: Prepare sync branch (record main tip on top of develop)
        shell: bash
        run: |
          set -euo pipefail
          git fetch --no-tags --prune origin +refs/heads/*:refs/remotes/origin/*

          SYNC_BRANCH="sync-release-${VERSION}"
          # Start from develop tip
          git checkout -B "${SYNC_BRANCH}" origin/develop

          # Force a merge commit referencing origin/main even if trees are identical.
          git merge -s ours --no-ff -m "chore(sync): main → develop" origin/main || true

          # Push the sync branch (ahead by 1 merge commit)
          git push -u origin "${SYNC_BRANCH}"

      - name: Create sync PR (main → develop)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: sync main → develop after release"
          title: "Version '${{ env.VERSION }}' sync main → develop"
          body: "Auto-generated PR to sync latest release."
          base: develop
          branch: sync-release-${{ env.VERSION }}
          delete-branch: true

  summary:
    name: Post-release Summary
    runs-on: ubuntu-latest
    needs: [ docker, clean-snapshots, sync-pr ]
    if: always()
    steps:
      - name: Print summary
        run: |
          echo "📦 Manual Post Release Summary"
          echo "Channel: ${{ inputs.channel }}"
          echo "Version: ${{ needs.safety-gates.outputs.version }}"
          echo "Package: ghcr.io/${{ github.repository_owner }}/${{ inputs['package-name'] }}:${{ needs.safety-gates.outputs.version }}"
