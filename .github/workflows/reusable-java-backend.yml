# .github/workflows/reusable-java-backend.yml
#
# Reusable workflow for Java backend repositories (e.g., wendara-backend).
# This workflow runs quality checks (Checkstyle, PMD, SpotBugs), unit and integration tests,
# builds and publishes Docker images to GHCR, performs security analysis (OWASP),
# and after a stable release on main, can open an automatic sync PR main → develop.
#
# Inputs (set by the caller workflow):
#   - release-channel: string (required)         -> Which channel is being built (develop or main)
#   - package-name: string (required)            -> GHCR package/image name (e.g. wendara-backend)
#
# Secrets (provided by the caller):
#   - GITHUB_TOKEN -> Token with packages:write (usually the caller's GITHUB_TOKEN)
#
# Outputs:
#   - (none currently, but can be extended)
#
# Notes:
# - This workflow assumes the repo has a standard Gradle Java project structure.
# - All helper scripts are available under .wendara-ci-actions/scripts/java/ in this repository.
# - External dependencies required by some scripts:
#     - yq (mikefarah, for YAML parsing)
#     - Docker (for image build/push)
#     - OWASP Dependency Check (via GitHub Action)
# - The workflow can be triggered manually (workflow_dispatch) or via workflow_call.
#
# Usage Example:
#   To call this workflow from another repo, use workflow_call and provide the required inputs/secrets.
#   All scripts are invoked using their relative path from the repo root, e.g.:
#     .wendara-ci-actions/scripts/java/gradle-quality.sh
#     .wendara-ci-actions/scripts/java/run-java-unit-tests.sh
#
# Jobs Overview:
#   - quality-checks: Runs Checkstyle, PMD, SpotBugs on all Java sources.
#   - unit-tests: Runs unit tests for all modules.
#   - integration-tests: Runs integration tests (if present).
#   - release: Publishes release artifacts (if on main).
#   - docker: Builds Docker image and pushes to GHCR.
#   - clean-snapshots: Cleans old GHCR snapshots (develop only).
#   - sync-pr: After stable publish, opens a PR to sync main → develop.
#   - owasp-check: Runs OWASP Dependency Check and uploads report.
#   - summary: Prints a summary of the pipeline results.
#
# For more details, see the README.md in this repository.

name: Reusable Java Backend CI

on:
  workflow_call:
    inputs:
      release-channel:
        description: "Which channel is being built (develop or main)"
        required: true
        type: string
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:

  quality-checks:
    name: Quality checks (Checkstyle/PMD/SpotBugs)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Run quality suite
        working-directory: code
        run: ../.wendara-ci-actions/scripts/java/gradle-quality.sh

  unit-tests:
    name: Unit tests + JaCoCo
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Set up Java (Gradle cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle
          cache-dependency-path: code/**/*.kts

      - name: Run unit tests
        working-directory: code
        run: ../.wendara-ci-actions/scripts/java/run-java-unit-tests.sh

      - name: Generate JaCoCo report
        working-directory: code
        run: ./gradlew jacocoTestReport --no-daemon

      - name: Upload JaCoCo HTML
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: code/**/build/reports/jacoco/test/html

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Start integration environment
        working-directory: code
        env:
          COMPOSE_FILE: src/test/resources/compose/docker-compose.yml
        run: ../.wendara-ci-actions/scripts/java/start-java-integration-env.sh

      - name: Run integration tests
        working-directory: code
        run: ../.wendara-ci-actions/scripts/java/run-java-integration-tests.sh

      - name: Stop integration environment
        if: always()
        working-directory: code
        env:
          COMPOSE_FILE: src/test/resources/compose/docker-compose.yml
        run: ../.wendara-ci-actions/scripts/java/stop-java-integration-env.sh

  release:
    name: Semantic release (tags/releases)
    runs-on: ubuntu-latest
    needs: [ unit-tests, integration-tests ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    outputs:
      published: ${{ steps.set-published.outputs.published }}
      released_version: ${{ steps.set-published.outputs.released_version }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      # Create an isolated npm config so we don't rely on (or break because of) a repo .npmrc
      - name: Prepare npm userconfig for CI
        run: |
          # Use the public npm registry by default
          echo "registry=https://registry.npmjs.org/" > .npmrc.ci
          echo "Using this CI npmrc:"
          cat .npmrc.ci

      # Install using the lockfile and our CI-only npmrc (prevents 401s from bad project .npmrc)
      - name: Install dependencies (lockfile-respecting)
        run: npm ci
        env:
          NPM_CONFIG_USERCONFIG: .npmrc.ci
          # This is only needed if you pull private packages (GH Packages).
          # For public npm only, it will be ignored.
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git identity (bot)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        run: |
          if [ "${{ inputs.release-channel }}" = "main" ]; then
            npm run release:main
          else
            npm run release:develop
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post-capture latest tag & set outputs
        id: set-published
        run: |
          git fetch --tags --force --quiet || true
          POST_TAG="$(git tag --list --sort=-creatordate | head -n1)"
          PRE_TAG="${{ steps.pre.outputs.tag }}"
          if [ -n "$POST_TAG" ] && [ "$POST_TAG" != "$PRE_TAG" ]; then
            echo "published=true" >> "$GITHUB_OUTPUT"
            echo "released_version=${POST_TAG#v}" >> "$GITHUB_OUTPUT"
          else
            echo "published=false" >> "$GITHUB_OUTPUT"
            echo "released_version=" >> "$GITHUB_OUTPUT"
          fi

  docker:
    name: Build & push Docker image (Jib → GHCR)
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && needs.release.outputs.published == 'true' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Resolve VERSION
        id: ver
        run: echo "version=$(.wendara-ci-actions/scripts/read-version.sh)" >> "$GITHUB_OUTPUT"

      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting docker."
            exit 1
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push with Jib
        working-directory: code
        run: ./gradlew jib --no-daemon --no-configuration-cache -Pversion="${{ needs.release.outputs.released_version || steps.ver.outputs.version }}"

  clean-snapshots:
    name: Clean old GHCR snapshots
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && needs.release.outputs.published == 'true' && inputs.release-channel == 'develop' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Resolve VERSION
        id: ver
        run: echo "version=$(.wendara-ci-actions/scripts/read-version.sh)" >> "$GITHUB_OUTPUT"

      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting cleanup."
            exit 1
          fi

      - name: Clean snapshots
        run: .wendara-ci-actions/scripts/clean-ghcr-snapshots.sh
        env:
          GH_OWNER: ${{ github.repository_owner }}
          PACKAGE_NAME: ${{ inputs['package-name'] }}
          SNAPSHOT_VERSION: ${{ steps.ver.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-pr:
    name: Sync PR main → develop
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && needs.release.outputs.published == 'true' && inputs.release-channel == 'main' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Resolve VERSION
        id: ver
        run: echo "version=$(.wendara-ci-actions/scripts/read-version.sh)" >> "$GITHUB_OUTPUT"

      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting sync PR."
            exit 1
          fi

      - name: Create sync PR (main → develop)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: sync main → develop after release"
          title: "Version '${{ steps.ver.outputs.version }}' sync main → develop"
          body: "Auto-generated PR to sync latest release."
          base: develop
          branch: sync-release-${{ steps.ver.outputs.version }}
          delete-branch: true

  owasp-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && needs.release.outputs.published == 'true' && inputs.release-channel == 'main' }}
    continue-on-error: true
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v3.1.2
        with:
          project: "Wendara Java Backend"
          path: "."
          format: "HTML"
          out: "reports"

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [docker, clean-snapshots, sync-pr, owasp-check]
    if: always()
    steps:
      - name: Print summary
        run: |
          echo "📦 Java Backend CI Summary"
          echo "Channel: ${{ inputs.release-channel }}"
          echo "Package: ghcr.io/${{ github.repository_owner }}/${{ inputs['package-name'] }}"
          echo "Published: ${{ needs.release.outputs.published }}"
          echo "Version: ${{ needs.release.outputs.released_version }}"
