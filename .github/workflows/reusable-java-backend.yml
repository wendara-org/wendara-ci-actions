name: Reusable Java Backend CI

on:
  workflow_call:
    inputs:
      release-channel:
        description: 'Which channel is being built (develop or main)'
        required: true
        type: string
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - run: ./scripts/java/gradle-quality.sh

  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'
      - run: chmod +x scripts/java/*.sh
      - run: ./scripts/java/run-java-unit-tests.sh
      - run: ./gradlew jacocoTestReport --no-daemon
      - uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: '**/build/reports/jacoco/test/html'

  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - run: ./scripts/java/start-java-integration-env.sh
      - run: ./scripts/java/run-java-integration-tests.sh
      - if: always()
        run: ./scripts/java/stop-java-integration-env.sh

  release:
    runs-on: ubuntu-latest
    if: ${{ inputs.release-channel == 'develop' || inputs.release-channel == 'main' }}
    needs: [ unit-tests, integration-tests ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Run semantic-release
        run: |
          if [ "${{ inputs.release-channel }}" = "main" ]; then
            npm run release:main
          else
            npm run release:develop
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && (inputs.release-channel == 'develop' || inputs.release-channel == 'main') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - name: Resolve VERSION
        id: ver
        env:
          RELEASE_CHANNEL: ${{ inputs.release-channel }}
        run: echo "version=$(./scripts/read-version.sh)" >> "$GITHUB_OUTPUT"
      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting docker."
            exit 1
          fi
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push image with Jib
        run: ./gradlew jib --no-daemon -Pversion="${{ steps.ver.outputs.version }}"

  clean-snapshots:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && inputs.release-channel == 'develop' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Resolve VERSION
        id: ver
        env:
          RELEASE_CHANNEL: ${{ inputs.release-channel }}
        run: echo "version=$(./scripts/read-version.sh)" >> "$GITHUB_OUTPUT"
      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting cleanup."
            exit 1
          fi
      - name: Clean old GHCR snapshots
        run: ./scripts/clean-ghcr-snapshots.sh
        env:
          GH_OWNER: ${{ github.repository_owner }}
          PACKAGE_NAME: ${{ inputs['package-name'] }}
          SNAPSHOT_VERSION: ${{ steps.ver.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-pr:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && inputs.release-channel == 'main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Resolve VERSION
        id: ver
        env:
          RELEASE_CHANNEL: ${{ inputs.release-channel }}
        run: echo "version=$(./scripts/read-version.sh)" >> "$GITHUB_OUTPUT"
      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting sync PR."
            exit 1
          fi
      - name: Create sync PR (main → develop)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: sync main → develop after release"
          title: "Version '${{ steps.ver.outputs.version }}' sync main → develop"
          body: "Auto-generated PR to sync latest release."
          base: develop
          branch: sync-release-${{ steps.ver.outputs.version }}
          delete-branch: true

  owasp-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && inputs.release-channel == 'main' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v3.1.2
        with:
          project: "Wendara Java Backend"
          path: "."
          format: "HTML"
          out: "reports"

      - name: Upload OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports
