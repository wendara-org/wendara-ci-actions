# .github/workflows/reusable-java-backend.yml
#
# Reusable workflow for Java backend repositories (e.g., wendara-backend).
# It runs quality checks (Checkstyle, PMD, SpotBugs), unit and integration tests,
# builds and publishes Docker images to GHCR, and performs security analysis (OWASP).
# After a stable release on main, it can open an automatic sync PR main → develop.
#
# Inputs (set by the caller workflow):
#   - release-channel: string (required)         -> Which channel is being built (develop or main)
#   - package-name: string (required)            -> GHCR package/image name (e.g. wendara-backend)
#
# Secrets (provided by the caller):
#   - GITHUB_TOKEN -> Token with packages:write (usually the caller's GITHUB_TOKEN)
#
# Outputs:
#   - (none currently, but can be extended)
#
# Notes:
# - This workflow assumes the repo has a standard Gradle Java project structure.
# - All helper scripts are available under the scripts/java/ directory in this repository.
#   Use relative paths like scripts/java/gradle-quality.sh, scripts/java/run-java-unit-tests.sh, etc.
# - External dependencies required by some scripts:
#     - yq (mikefarah, for YAML parsing)
#     - Docker (for image build/push)
#     - OWASP Dependency Check (via GitHub Action)
#
# Usage Example:
#   To call this workflow from another repo, use workflow_call and provide the required inputs/secrets.
#   All scripts are invoked using their relative path from the repo root, e.g.:
#     scripts/java/gradle-quality.sh
#     scripts/java/run-java-unit-tests.sh
#
# Jobs Overview:
#   - quality-checks: Runs Checkstyle, PMD, SpotBugs on all Java sources.
#   - unit-tests: Runs unit tests for all modules.
#   - integration-tests: Runs integration tests (if present).
#   - build-and-publish: Builds Docker image and pushes to GHCR.
#   - release: Publishes release artifacts (if on main).
#   - owasp-check: Runs OWASP Dependency Check and uploads report.
#   - sync: After stable publish, opens a PR to sync main → develop.
#
# For more details, see the README.md in this repository.

name: Reusable Java Backend CI

on:
  workflow_call:
    inputs:
      release-channel:
        description: "Which channel is being built (develop or main)"
        required: true
        type: string
      package-name:
        description: "GHCR package/image name (e.g. wendara-backend)"
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:

  quality-checks:
    name: Quality checks (Checkstyle/PMD/SpotBugs)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Run quality suite
        run: .wendara-ci-actions/scripts/java/gradle-quality.sh

  unit-tests:
    name: Unit tests + JaCoCo
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Set up Java (Gradle cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Run unit tests
        run: .wendara-ci-actions/scripts/java/run-java-unit-tests.sh

      - name: Generate JaCoCo report
        run: ./gradlew jacocoTestReport --no-daemon

      - name: Upload JaCoCo HTML
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: '**/build/reports/jacoco/test/html'

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Start integration environment
        run: .wendara-ci-actions/scripts/java/start-java-integration-env.sh

      - name: Run integration tests
        run: .wendara-ci-actions/scripts/java/run-java-integration-tests.sh

      - name: Stop integration environment
        if: always()
        run: .wendara-ci-actions/scripts/java/stop-java-integration-env.sh

  release:
    name: Semantic release (tags/releases)
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: ${{ inputs.release-channel == 'develop' || inputs.release-channel == 'main' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install node deps
        run: npm ci

      - name: Configure Git identity (bot)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        run: |
          if [ "${{ inputs.release-channel }}" = "main" ]; then
            npm run release:main
          else
            npm run release:develop
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build & push Docker image (Jib → GHCR)
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && (inputs.release-channel == 'develop' || inputs.release-channel == 'main') }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Resolve VERSION
        id: ver
        run: echo "version=$(.wendara-ci-actions/scripts/read-version.sh)" >> "$GITHUB_OUTPUT"

      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting docker."
            exit 1
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push with Jib
        run: ./gradlew jib --no-daemon -Pversion="${{ steps.ver.outputs.version }}"

  clean-snapshots:
    name: Clean old GHCR snapshots
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && inputs.release-channel == 'develop' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Resolve VERSION
        id: ver
        run: echo "version=$(.wendara-ci-actions/scripts/read-version.sh)" >> "$GITHUB_OUTPUT"

      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting cleanup."
            exit 1
          fi

      - name: Clean snapshots
        run: .wendara-ci-actions/scripts/clean-ghcr-snapshots.sh
        env:
          GH_OWNER: ${{ github.repository_owner }}
          PACKAGE_NAME: ${{ inputs['package-name'] }}
          SNAPSHOT_VERSION: ${{ steps.ver.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-pr:
    name: Sync PR main → develop
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && inputs.release-channel == 'main' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ci-actions (scripts)
        uses: actions/checkout@v4
        with:
          repository: wendara-org/wendara-ci-actions
          path: .wendara-ci-actions
          ref: main

      - name: Make scripts executable
        run: chmod +x .wendara-ci-actions/scripts/*.sh .wendara-ci-actions/scripts/java/*.sh

      - name: Resolve VERSION
        id: ver
        run: echo "version=$(.wendara-ci-actions/scripts/read-version.sh)" >> "$GITHUB_OUTPUT"

      - name: Validate VERSION
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "❌ VERSION is empty. Aborting sync PR."
            exit 1
          fi

      - name: Create sync PR (main → develop)
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: sync main → develop after release"
          title: "Version '${{ steps.ver.outputs.version }}' sync main → develop"
          body: "Auto-generated PR to sync latest release."
          base: develop
          branch: sync-release-${{ steps.ver.outputs.version }}
          delete-branch: true

  owasp-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: release
    if: ${{ success() && inputs.release-channel == 'main' }}
    steps:
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v3.1.2
        with:
          project: "Wendara Java Backend"
          path: "."
          format: "HTML"
          out: "reports"

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports
